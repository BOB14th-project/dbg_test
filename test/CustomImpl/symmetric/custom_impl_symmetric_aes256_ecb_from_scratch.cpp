#include <array>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <vector>

namespace {

using Block = std::array<uint8_t, 16>;
using RoundKey = std::array<uint8_t, 16>;

constexpr std::array<uint8_t, 256> SBOX = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b,
    0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26,
    0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,
    0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed,
    0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f,
    0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
    0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
    0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,
    0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f,
    0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
    0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
    0xb0, 0x54, 0xbb, 0x16};

constexpr std::array<uint8_t, 256> INV_SBOX = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e,
    0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32,
    0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49,
    0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50,
    0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05,
    0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
    0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8,
    0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b,
    0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59,
    0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d,
    0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63,
    0x55, 0x21, 0x0c, 0x7d};

constexpr std::array<uint32_t, 10> RCON = {
    0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
    0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000};

const uint32_t Nb = 4;
const uint32_t Nk = 8;
const uint32_t Nr = 14;

uint8_t xtime(uint8_t x) {
    return static_cast<uint8_t>((x << 1) ^ ((x >> 7) * 0x1B));
}

uint8_t multiply(uint8_t x, uint8_t y) {
    uint8_t result = 0;
    while (y) {
        if (y & 1) result ^= x;
        x = xtime(x);
        y >>= 1;
    }
    return result;
}

uint32_t rot_word(uint32_t w) {
    return (w << 8) | (w >> 24);
}

uint32_t sub_word(uint32_t w) {
    return (static_cast<uint32_t>(SBOX[(w >> 24) & 0xFF]) << 24) |
           (static_cast<uint32_t>(SBOX[(w >> 16) & 0xFF]) << 16) |
           (static_cast<uint32_t>(SBOX[(w >> 8) & 0xFF]) << 8) |
           static_cast<uint32_t>(SBOX[w & 0xFF]);
}

void sub_bytes(Block& state) {
    for (auto& b : state) b = SBOX[b];
}

void inv_sub_bytes(Block& state) {
    for (auto& b : state) b = INV_SBOX[b];
}

void shift_rows(Block& state) {
    Block tmp = state;
    state[1] = tmp[5];
    state[5] = tmp[9];
    state[9] = tmp[13];
    state[13] = tmp[1];

    state[2] = tmp[10];
    state[6] = tmp[14];
    state[10] = tmp[2];
    state[14] = tmp[6];

    state[3] = tmp[15];
    state[7] = tmp[3];
    state[11] = tmp[7];
    state[15] = tmp[11];
}

void inv_shift_rows(Block& state) {
    Block tmp = state;
    state[1] = tmp[13];
    state[5] = tmp[1];
    state[9] = tmp[5];
    state[13] = tmp[9];

    state[2] = tmp[10];
    state[6] = tmp[14];
    state[10] = tmp[2];
    state[14] = tmp[6];

    state[3] = tmp[7];
    state[7] = tmp[11];
    state[11] = tmp[15];
    state[15] = tmp[3];
}

void mix_columns(Block& state) {
    for (int c = 0; c < 4; ++c) {
        uint8_t* col = &state[c * 4];
        uint8_t a0 = col[0], a1 = col[1], a2 = col[2], a3 = col[3];
        col[0] = multiply(a0, 2) ^ multiply(a1, 3) ^ a2 ^ a3;
        col[1] = a0 ^ multiply(a1, 2) ^ multiply(a2, 3) ^ a3;
        col[2] = a0 ^ a1 ^ multiply(a2, 2) ^ multiply(a3, 3);
        col[3] = multiply(a0, 3) ^ a1 ^ a2 ^ multiply(a3, 2);
    }
}

void inv_mix_columns(Block& state) {
    for (int c = 0; c < 4; ++c) {
        uint8_t* col = &state[c * 4];
        uint8_t a0 = col[0], a1 = col[1], a2 = col[2], a3 = col[3];
        col[0] = multiply(a0, 14) ^ multiply(a1, 11) ^ multiply(a2, 13) ^
                 multiply(a3, 9);
        col[1] = multiply(a0, 9) ^ multiply(a1, 14) ^ multiply(a2, 11) ^
                 multiply(a3, 13);
        col[2] = multiply(a0, 13) ^ multiply(a1, 9) ^ multiply(a2, 14) ^
                 multiply(a3, 11);
        col[3] = multiply(a0, 11) ^ multiply(a1, 13) ^ multiply(a2, 9) ^
                 multiply(a3, 14);
    }
}

void add_round_key(Block& state, const RoundKey& key) {
    for (size_t i = 0; i < 16; ++i) {
        state[i] ^= key[i];
    }
}

std::vector<RoundKey> expand_key(const std::array<uint8_t, 32>& key) {
    std::array<uint32_t, Nb * (Nr + 1)> words{};
    for (uint32_t i = 0; i < Nk; ++i) {
        words[i] = (static_cast<uint32_t>(key[4 * i]) << 24) |
                   (static_cast<uint32_t>(key[4 * i + 1]) << 16) |
                   (static_cast<uint32_t>(key[4 * i + 2]) << 8) |
                   static_cast<uint32_t>(key[4 * i + 3]);
    }

    for (uint32_t i = Nk; i < Nb * (Nr + 1); ++i) {
        uint32_t temp = words[i - 1];
        if (i % Nk == 0) {
            temp = sub_word(rot_word(temp)) ^ RCON[i / Nk - 1];
        } else if (i % Nk == 4) {
            temp = sub_word(temp);
        }
        words[i] = words[i - Nk] ^ temp;
    }

    std::vector<RoundKey> round_keys(Nr + 1);
    for (uint32_t round = 0; round <= Nr; ++round) {
        RoundKey rk{};
        for (uint32_t col = 0; col < Nb; ++col) {
            uint32_t word = words[round * Nb + col];
            rk[4 * col + 0] = static_cast<uint8_t>((word >> 24) & 0xFF);
            rk[4 * col + 1] = static_cast<uint8_t>((word >> 16) & 0xFF);
            rk[4 * col + 2] = static_cast<uint8_t>((word >> 8) & 0xFF);
            rk[4 * col + 3] = static_cast<uint8_t>(word & 0xFF);
        }
        round_keys[round] = rk;
    }
    return round_keys;
}

Block encrypt_block(Block state, const std::vector<RoundKey>& round_keys) {
    add_round_key(state, round_keys[0]);
    for (uint32_t round = 1; round < Nr; ++round) {
        sub_bytes(state);
        shift_rows(state);
        mix_columns(state);
        add_round_key(state, round_keys[round]);
    }
    sub_bytes(state);
    shift_rows(state);
    add_round_key(state, round_keys[Nr]);
    return state;
}

Block decrypt_block(Block state, const std::vector<RoundKey>& round_keys) {
    add_round_key(state, round_keys[Nr]);
    for (uint32_t round = Nr - 1; round > 0; --round) {
        inv_shift_rows(state);
        inv_sub_bytes(state);
        add_round_key(state, round_keys[round]);
        inv_mix_columns(state);
    }
    inv_shift_rows(state);
    inv_sub_bytes(state);
    add_round_key(state, round_keys[0]);
    return state;
}

void print_block(const std::string& label, const Block& block) {
    std::cout << label << " ";
    for (auto b : block) {
        std::cout << std::hex << std::setw(2) << std::setfill('0')
                  << static_cast<int>(b);
    }
    std::cout << std::dec << "\n";
}

}  // namespace

int main() {
    const std::array<uint8_t, 32> key = {
        0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
        0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
        0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
        0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};

    const Block plaintext = {
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
        0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a};

    auto round_keys = expand_key(key);
    Block ciphertext = encrypt_block(plaintext, round_keys);
    Block recovered = decrypt_block(ciphertext, round_keys);

    print_block("Plaintext :", plaintext);
    print_block("Ciphertext:", ciphertext);
    print_block("Recovered :", recovered);
    return 0;
}
